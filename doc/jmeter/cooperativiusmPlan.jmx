<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plano de Teste">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variáveis Definidas Pelo Usuário">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">150</stringProp>
        <stringProp name="RampUp">0.8</stringProp>
        <stringProp name="Steps">4</stringProp>
        <stringProp name="Hold">5</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Gerenciador de Cabeçalhos HTTP">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import java.util.ArrayList;
import java.util.List;

public String gerarCpf() {
    // Geração de CPF
    List&lt;Integer&gt; listaAleatoria = new ArrayList&lt;&gt;();
    List&lt;Integer&gt; listaNumMultiplicados;
    
    // Primeiro executamos os métodos de geração
    for (int i = 0; i &lt; 9; i++) {
        listaAleatoria.add((int) (Math.random() * 10));
    }
    
    listaNumMultiplicados = new ArrayList&lt;&gt;();
    int primeiroDigito;
    int totalSomatoria = 0;
    int restoDivisao;
    int peso = 10;
    
    // Multiplicação pelo peso
    for (int i = 0; i &lt; listaAleatoria.size(); i++) {
        listaNumMultiplicados.add(listaAleatoria.get(i) * peso);
        peso--;
    }
    
    // Soma dos itens multiplicados
    for (int num : listaNumMultiplicados) {
        totalSomatoria += num;
    }
    restoDivisao = (totalSomatoria % 11);
    
    // Primeiro dígito
    if (restoDivisao &lt; 2) {
        primeiroDigito = 0;
    } else {
        primeiroDigito = 11 - restoDivisao;
    }
    
    // Adiciona o primeiro dígito
    listaAleatoria.add(primeiroDigito);
    listaNumMultiplicados = new ArrayList&lt;&gt;();
    int segundoDigito;
    totalSomatoria = 0;
    peso = 11;
    
    // Multiplicação pelo peso para o segundo dígito
    for (int i = 0; i &lt; listaAleatoria.size(); i++) {
        listaNumMultiplicados.add(listaAleatoria.get(i) * peso);
        peso--;
    }
    
    // Soma dos itens multiplicados para o segundo dígito
    for (int num : listaNumMultiplicados) {
        totalSomatoria += num;
    }
    
    restoDivisao = (totalSomatoria % 11);
    
    // Segundo dígito
    if (restoDivisao &lt; 2) {
        segundoDigito = 0;
    } else {
        segundoDigito = 11 - restoDivisao;
    }
    
    // Adiciona o segundo dígito
    listaAleatoria.add(segundoDigito);
    
    // Monta o CPF em formato de string
    StringBuilder cpf = new StringBuilder();
    for (int num : listaAleatoria) {
        cpf.append(num);
    }
    
    return cpf.toString();
}

// Gera um CPF e armazena na variável
String cpfGerado = gerarCpf();
vars.put(&quot;cpfValido&quot;, cpfGerado);
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Requisição HTTP">
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.path">/api/v1/sessao/1/votar</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;nationalId&quot;: &quot;${cpfValido}&quot;,&#xd;
    &quot;value&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Ver Árvore de Resultados">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
